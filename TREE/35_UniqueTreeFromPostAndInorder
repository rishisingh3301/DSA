/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* maketree(vector<int>& postorder,int poststart, int postend, vector<int>& inorder,int instart, int inend, map<int,int> &inordmap){
        if(poststart>postend || instart>inend){return NULL;}
        int inroot = inordmap[postorder[postend]];
        int numleft = inroot-instart;
        TreeNode* root= new TreeNode(postorder[postend]);
        root->left=maketree(
            postorder,poststart,poststart+numleft-1,
            inorder,instart,inroot-1,
            inordmap
        );
        root->right=maketree(
            postorder,poststart+numleft,postend-1,
            inorder,inroot+1,inend,
            inordmap
        );
        return root;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        map<int,int> inordmap;
        for(int i=0;i<inorder.size();i++){
            inordmap[inorder[i]]=i;
        }

        TreeNode* root=maketree(
            postorder,0,postorder.size()-1,
            inorder,0,inorder.size()-1,
            inordmap
        );
        return root;
    }
};